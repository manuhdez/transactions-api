// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	"github.com/manuhdez/transactions-api/internal/accounts/internal/api/http/router"
	"github.com/manuhdez/transactions-api/internal/accounts/internal/api/http/v1/controller"
	"github.com/manuhdez/transactions-api/internal/accounts/internal/application/event_handler"
	"github.com/manuhdez/transactions-api/internal/accounts/internal/application/service"
	"github.com/manuhdez/transactions-api/internal/accounts/internal/domain/account"
	"github.com/manuhdez/transactions-api/internal/accounts/internal/domain/event"
	"github.com/manuhdez/transactions-api/internal/accounts/internal/infra/db"
	"github.com/manuhdez/transactions-api/internal/accounts/internal/infra/queue/rabbitmq"
	"github.com/manuhdez/transactions-api/shared/config"
)

// Injectors from wire.go:

func BootstrapApp() App {
	dbConfig := config.NewDBConfig()
	gormDB := config.NewGormDBConnection(dbConfig)
	accountPostgresRepository := db.NewAccountPostgresRepository(gormDB)
	accountsFinder := service.NewFindAccountService(accountPostgresRepository)
	findAllAccounts := controller.NewFindAllAccounts(accountsFinder)
	eventBus := rabbitmq.NewEventBus()
	createService := service.NewCreateService(accountPostgresRepository, eventBus)
	createAccount := controller.NewCreateAccount(createService)
	findAccount := controller.NewFindAccountController(accountsFinder)
	deleteAccountService := service.NewDeleteAccountService(accountPostgresRepository)
	deleteAccount := controller.NewDeleteAccount(deleteAccountService)
	routerRouter := router.NewRouter(findAllAccounts, createAccount, findAccount, deleteAccount)
	increaseBalanceService := service.NewIncreaseBalanceService(accountPostgresRepository)
	depositCreated := event_handler.NewHandlerDepositCreated(increaseBalanceService)
	decreaseBalance := service.NewDecreaseBalanceService(accountPostgresRepository)
	withdrawCreated := event_handler.NewWithdrawCreated(decreaseBalance)
	app := NewApp(routerRouter, eventBus, depositCreated, withdrawCreated)
	return app
}

// wire.go:

var Databases = wire.NewSet(config.NewDBConfig, config.NewGormDBConnection)

var Repositories = wire.NewSet(wire.Bind(new(account.Repository), new(db.AccountPostgresRepository)), db.NewAccountPostgresRepository)

var Services = wire.NewSet(service.NewCreateService, service.NewFindAccountService, service.NewDeleteAccountService, service.NewIncreaseBalanceService, service.NewDecreaseBalanceService)

var Controllers = wire.NewSet(controller.NewCreateAccount, controller.NewFindAccountController, controller.NewFindAllAccounts, controller.NewDeleteAccount)

var Router = wire.NewSet(router.NewRouter)

var Buses = wire.NewSet(wire.Bind(new(event.Bus), new(rabbitmq.EventBus)), rabbitmq.NewEventBus)

var EventHandlers = wire.NewSet(event_handler.NewHandlerDepositCreated, event_handler.NewWithdrawCreated)

type App struct {
	Server   router.Router
	EventBus event.Bus
}

// TODO: move event subscription to a proper place
func NewApp(router2 router.Router,

	eventBus event.Bus,
	depositCreatedHandler event_handler.DepositCreated,
	withdrawCreatedHandler event_handler.WithdrawCreated,
) App {
	eventBus.Subscribe(event_handler.DepositCreatedType, depositCreatedHandler)
	eventBus.Subscribe(event_handler.WithdrawCreatedType, withdrawCreatedHandler)

	return App{Server: router2, EventBus: eventBus}
}
