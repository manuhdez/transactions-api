// Code generated by mockery v2.47.0. DO NOT EDIT.

package mocks

import (
	context "context"

	transaction "github.com/manuhdez/transactions-api/internal/transactions/domain/transaction"
	mock "github.com/stretchr/testify/mock"
)

// TransactionRepository is an autogenerated mock type for the Repository type
type TransactionRepository struct {
	mock.Mock
}

type TransactionRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *TransactionRepository) EXPECT() *TransactionRepository_Expecter {
	return &TransactionRepository_Expecter{mock: &_m.Mock}
}

// All provides a mock function with given fields: ctx, userId
func (_m *TransactionRepository) All(ctx context.Context, userId string) ([]transaction.Transaction, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for All")
	}

	var r0 []transaction.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]transaction.Transaction, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []transaction.Transaction); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]transaction.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransactionRepository_All_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'All'
type TransactionRepository_All_Call struct {
	*mock.Call
}

// All is a helper method to define mock.On call
//   - ctx context.Context
//   - userId string
func (_e *TransactionRepository_Expecter) All(ctx interface{}, userId interface{}) *TransactionRepository_All_Call {
	return &TransactionRepository_All_Call{Call: _e.mock.On("All", ctx, userId)}
}

func (_c *TransactionRepository_All_Call) Run(run func(ctx context.Context, userId string)) *TransactionRepository_All_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TransactionRepository_All_Call) Return(_a0 []transaction.Transaction, _a1 error) *TransactionRepository_All_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TransactionRepository_All_Call) RunAndReturn(run func(context.Context, string) ([]transaction.Transaction, error)) *TransactionRepository_All_Call {
	_c.Call.Return(run)
	return _c
}

// Deposit provides a mock function with given fields: ctx, t
func (_m *TransactionRepository) Deposit(ctx context.Context, t transaction.Transaction) error {
	ret := _m.Called(ctx, t)

	if len(ret) == 0 {
		panic("no return value specified for Deposit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, transaction.Transaction) error); ok {
		r0 = rf(ctx, t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TransactionRepository_Deposit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Deposit'
type TransactionRepository_Deposit_Call struct {
	*mock.Call
}

// Deposit is a helper method to define mock.On call
//   - ctx context.Context
//   - t transaction.Transaction
func (_e *TransactionRepository_Expecter) Deposit(ctx interface{}, t interface{}) *TransactionRepository_Deposit_Call {
	return &TransactionRepository_Deposit_Call{Call: _e.mock.On("Deposit", ctx, t)}
}

func (_c *TransactionRepository_Deposit_Call) Run(run func(ctx context.Context, t transaction.Transaction)) *TransactionRepository_Deposit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(transaction.Transaction))
	})
	return _c
}

func (_c *TransactionRepository_Deposit_Call) Return(_a0 error) *TransactionRepository_Deposit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TransactionRepository_Deposit_Call) RunAndReturn(run func(context.Context, transaction.Transaction) error) *TransactionRepository_Deposit_Call {
	_c.Call.Return(run)
	return _c
}

// FindByAccount provides a mock function with given fields: ctx, id
func (_m *TransactionRepository) FindByAccount(ctx context.Context, id string) ([]transaction.Transaction, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindByAccount")
	}

	var r0 []transaction.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]transaction.Transaction, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []transaction.Transaction); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]transaction.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransactionRepository_FindByAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByAccount'
type TransactionRepository_FindByAccount_Call struct {
	*mock.Call
}

// FindByAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *TransactionRepository_Expecter) FindByAccount(ctx interface{}, id interface{}) *TransactionRepository_FindByAccount_Call {
	return &TransactionRepository_FindByAccount_Call{Call: _e.mock.On("FindByAccount", ctx, id)}
}

func (_c *TransactionRepository_FindByAccount_Call) Run(run func(ctx context.Context, id string)) *TransactionRepository_FindByAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TransactionRepository_FindByAccount_Call) Return(_a0 []transaction.Transaction, _a1 error) *TransactionRepository_FindByAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TransactionRepository_FindByAccount_Call) RunAndReturn(run func(context.Context, string) ([]transaction.Transaction, error)) *TransactionRepository_FindByAccount_Call {
	_c.Call.Return(run)
	return _c
}

// Withdraw provides a mock function with given fields: ctx, t
func (_m *TransactionRepository) Withdraw(ctx context.Context, t transaction.Transaction) error {
	ret := _m.Called(ctx, t)

	if len(ret) == 0 {
		panic("no return value specified for Withdraw")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, transaction.Transaction) error); ok {
		r0 = rf(ctx, t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TransactionRepository_Withdraw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Withdraw'
type TransactionRepository_Withdraw_Call struct {
	*mock.Call
}

// Withdraw is a helper method to define mock.On call
//   - ctx context.Context
//   - t transaction.Transaction
func (_e *TransactionRepository_Expecter) Withdraw(ctx interface{}, t interface{}) *TransactionRepository_Withdraw_Call {
	return &TransactionRepository_Withdraw_Call{Call: _e.mock.On("Withdraw", ctx, t)}
}

func (_c *TransactionRepository_Withdraw_Call) Run(run func(ctx context.Context, t transaction.Transaction)) *TransactionRepository_Withdraw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(transaction.Transaction))
	})
	return _c
}

func (_c *TransactionRepository_Withdraw_Call) Return(_a0 error) *TransactionRepository_Withdraw_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TransactionRepository_Withdraw_Call) RunAndReturn(run func(context.Context, transaction.Transaction) error) *TransactionRepository_Withdraw_Call {
	_c.Call.Return(run)
	return _c
}

// NewTransactionRepository creates a new instance of TransactionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactionRepository {
	mock := &TransactionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
