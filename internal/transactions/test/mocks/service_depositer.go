// Code generated by mockery v2.47.0. DO NOT EDIT.

package mocks

import (
	context "context"

	event "github.com/manuhdez/transactions-api/internal/transactions/domain/event"
	mock "github.com/stretchr/testify/mock"

	transaction "github.com/manuhdez/transactions-api/internal/transactions/domain/transaction"
)

// ServiceDepositer is an autogenerated mock type for the Depositer type
type ServiceDepositer struct {
	mock.Mock
}

type ServiceDepositer_Expecter struct {
	mock *mock.Mock
}

func (_m *ServiceDepositer) EXPECT() *ServiceDepositer_Expecter {
	return &ServiceDepositer_Expecter{mock: &_m.Mock}
}

// Deposit provides a mock function with given fields: _a0, _a1
func (_m *ServiceDepositer) Deposit(_a0 context.Context, _a1 transaction.Transaction) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Deposit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, transaction.Transaction) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ServiceDepositer_Deposit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Deposit'
type ServiceDepositer_Deposit_Call struct {
	*mock.Call
}

// Deposit is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 transaction.Transaction
func (_e *ServiceDepositer_Expecter) Deposit(_a0 interface{}, _a1 interface{}) *ServiceDepositer_Deposit_Call {
	return &ServiceDepositer_Deposit_Call{Call: _e.mock.On("Deposit", _a0, _a1)}
}

func (_c *ServiceDepositer_Deposit_Call) Run(run func(_a0 context.Context, _a1 transaction.Transaction)) *ServiceDepositer_Deposit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(transaction.Transaction))
	})
	return _c
}

func (_c *ServiceDepositer_Deposit_Call) Return(_a0 error) *ServiceDepositer_Deposit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceDepositer_Deposit_Call) RunAndReturn(run func(context.Context, transaction.Transaction) error) *ServiceDepositer_Deposit_Call {
	_c.Call.Return(run)
	return _c
}

// PullEvents provides a mock function with given fields:
func (_m *ServiceDepositer) PullEvents() []event.Event {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PullEvents")
	}

	var r0 []event.Event
	if rf, ok := ret.Get(0).(func() []event.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]event.Event)
		}
	}

	return r0
}

// ServiceDepositer_PullEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PullEvents'
type ServiceDepositer_PullEvents_Call struct {
	*mock.Call
}

// PullEvents is a helper method to define mock.On call
func (_e *ServiceDepositer_Expecter) PullEvents() *ServiceDepositer_PullEvents_Call {
	return &ServiceDepositer_PullEvents_Call{Call: _e.mock.On("PullEvents")}
}

func (_c *ServiceDepositer_PullEvents_Call) Run(run func()) *ServiceDepositer_PullEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ServiceDepositer_PullEvents_Call) Return(_a0 []event.Event) *ServiceDepositer_PullEvents_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceDepositer_PullEvents_Call) RunAndReturn(run func() []event.Event) *ServiceDepositer_PullEvents_Call {
	_c.Call.Return(run)
	return _c
}

// NewServiceDepositer creates a new instance of ServiceDepositer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServiceDepositer(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServiceDepositer {
	mock := &ServiceDepositer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
