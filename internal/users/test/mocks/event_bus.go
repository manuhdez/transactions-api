// Code generated by mockery v2.47.0. DO NOT EDIT.

package mocks

import (
	"context"

	"github.com/stretchr/testify/mock"

	"github.com/manuhdez/transactions-api/internal/users/internal/domain/event"
)

// EventBus is an autogenerated mock type for the Bus type
type EventBus struct {
	mock.Mock
}

type EventBus_Expecter struct {
	mock *mock.Mock
}

func (_m *EventBus) EXPECT() *EventBus_Expecter {
	return &EventBus_Expecter{mock: &_m.Mock}
}

// Listen provides a mock function with given fields:
func (_m *EventBus) Listen() {
	_m.Called()
}

// EventBus_Listen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Listen'
type EventBus_Listen_Call struct {
	*mock.Call
}

// Listen is a helper method to define mock.On call
func (_e *EventBus_Expecter) Listen() *EventBus_Listen_Call {
	return &EventBus_Listen_Call{Call: _e.mock.On("Listen")}
}

func (_c *EventBus_Listen_Call) Run(run func()) *EventBus_Listen_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EventBus_Listen_Call) Return() *EventBus_Listen_Call {
	_c.Call.Return()
	return _c
}

func (_c *EventBus_Listen_Call) RunAndReturn(run func()) *EventBus_Listen_Call {
	_c.Call.Return(run)
	return _c
}

// Publish provides a mock function with given fields: ctx, _a1
func (_m *EventBus) Publish(ctx context.Context, _a1 event.Event) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, event.Event) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EventBus_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type EventBus_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 event.Event
func (_e *EventBus_Expecter) Publish(ctx interface{}, _a1 interface{}) *EventBus_Publish_Call {
	return &EventBus_Publish_Call{Call: _e.mock.On("Publish", ctx, _a1)}
}

func (_c *EventBus_Publish_Call) Run(run func(ctx context.Context, _a1 event.Event)) *EventBus_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(event.Event))
	})
	return _c
}

func (_c *EventBus_Publish_Call) Return(_a0 error) *EventBus_Publish_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EventBus_Publish_Call) RunAndReturn(run func(context.Context, event.Event) error) *EventBus_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// Subscribe provides a mock function with given fields: _a0, _a1
func (_m *EventBus) Subscribe(_a0 event.Type, _a1 event.Handler) {
	_m.Called(_a0, _a1)
}

// EventBus_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type EventBus_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - _a0 event.Type
//   - _a1 event.Handler
func (_e *EventBus_Expecter) Subscribe(_a0 interface{}, _a1 interface{}) *EventBus_Subscribe_Call {
	return &EventBus_Subscribe_Call{Call: _e.mock.On("Subscribe", _a0, _a1)}
}

func (_c *EventBus_Subscribe_Call) Run(run func(_a0 event.Type, _a1 event.Handler)) *EventBus_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(event.Type), args[1].(event.Handler))
	})
	return _c
}

func (_c *EventBus_Subscribe_Call) Return() *EventBus_Subscribe_Call {
	_c.Call.Return()
	return _c
}

func (_c *EventBus_Subscribe_Call) RunAndReturn(run func(event.Type, event.Handler)) *EventBus_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}

// NewEventBus creates a new instance of EventBus. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEventBus(t interface {
	mock.TestingT
	Cleanup(func())
}) *EventBus {
	mock := &EventBus{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
