// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	domainuser "github.com/manuhdez/transactions-api/internal/users/domain/user"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// All provides a mock function with given fields: ctx
func (_m *Repository) All(ctx context.Context) ([]domainuser.User, error) {
	ret := _m.Called(ctx)

	var r0 []domainuser.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domainuser.User, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domainuser.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domainuser.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_All_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'All'
type Repository_All_Call struct {
	*mock.Call
}

// All is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Repository_Expecter) All(ctx interface{}) *Repository_All_Call {
	return &Repository_All_Call{Call: _e.mock.On("All", ctx)}
}

func (_c *Repository_All_Call) Run(run func(ctx context.Context)) *Repository_All_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Repository_All_Call) Return(_a0 []domainuser.User, _a1 error) *Repository_All_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_All_Call) RunAndReturn(run func(context.Context) ([]domainuser.User, error)) *Repository_All_Call {
	_c.Call.Return(run)
	return _c
}

// FindByEmail provides a mock function with given fields: ctx, email
func (_m *Repository) FindByEmail(ctx context.Context, email string) (domainuser.User, error) {
	ret := _m.Called(ctx, email)

	var r0 domainuser.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domainuser.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domainuser.User); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(domainuser.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_FindByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByEmail'
type Repository_FindByEmail_Call struct {
	*mock.Call
}

// FindByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *Repository_Expecter) FindByEmail(ctx interface{}, email interface{}) *Repository_FindByEmail_Call {
	return &Repository_FindByEmail_Call{Call: _e.mock.On("FindByEmail", ctx, email)}
}

func (_c *Repository_FindByEmail_Call) Run(run func(ctx context.Context, email string)) *Repository_FindByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Repository_FindByEmail_Call) Return(_a0 domainuser.User, _a1 error) *Repository_FindByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_FindByEmail_Call) RunAndReturn(run func(context.Context, string) (domainuser.User, error)) *Repository_FindByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: ctx, user
func (_m *Repository) Save(ctx context.Context, user domainuser.User) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domainuser.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type Repository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - user domainuser.User
func (_e *Repository_Expecter) Save(ctx interface{}, user interface{}) *Repository_Save_Call {
	return &Repository_Save_Call{Call: _e.mock.On("Save", ctx, user)}
}

func (_c *Repository_Save_Call) Run(run func(ctx context.Context, user domainuser.User)) *Repository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domainuser.User))
	})
	return _c
}

func (_c *Repository_Save_Call) Return(_a0 error) *Repository_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_Save_Call) RunAndReturn(run func(context.Context, domainuser.User) error) *Repository_Save_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
