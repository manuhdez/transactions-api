// Code generated by mockery v2.47.0. DO NOT EDIT.

package mocks

import (
	context "context"

	event "github.com/manuhdez/transactions-api/internal/transactions/domain/event"
	mock "github.com/stretchr/testify/mock"

	transaction "github.com/manuhdez/transactions-api/internal/transactions/domain/transaction"
)

// Transactioner is an autogenerated mock type for the Transactioner type
type Transactioner struct {
	mock.Mock
}

// Deposit provides a mock function with given fields: _a0, _a1
func (_m *Transactioner) Deposit(_a0 context.Context, _a1 transaction.Transaction) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Deposit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, transaction.Transaction) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PullEvents provides a mock function with given fields:
func (_m *Transactioner) PullEvents() []event.Event {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PullEvents")
	}

	var r0 []event.Event
	if rf, ok := ret.Get(0).(func() []event.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]event.Event)
		}
	}

	return r0
}

// Transfer provides a mock function with given fields: _a0, _a1
func (_m *Transactioner) Transfer(_a0 context.Context, _a1 transaction.Transfer) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Transfer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, transaction.Transfer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Withdraw provides a mock function with given fields: _a0, _a1
func (_m *Transactioner) Withdraw(_a0 context.Context, _a1 transaction.Transaction) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Withdraw")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, transaction.Transaction) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTransactioner creates a new instance of Transactioner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactioner(t interface {
	mock.TestingT
	Cleanup(func())
}) *Transactioner {
	mock := &Transactioner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
