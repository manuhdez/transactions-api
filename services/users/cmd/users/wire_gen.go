// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/manuhdez/transactions-api/internal/users/internal/api/http/router"
	"github.com/manuhdez/transactions-api/internal/users/internal/api/http/v1/controller"
	"github.com/manuhdez/transactions-api/internal/users/internal/application/service"
	"github.com/manuhdez/transactions-api/internal/users/internal/infra"
	"github.com/manuhdez/transactions-api/internal/users/internal/infra/db"
	"github.com/manuhdez/transactions-api/internal/users/internal/infra/queue/rabbitmq"
	"github.com/manuhdez/transactions-api/shared/config"
)

// Injectors from wire.go:

func Init() App {
	healthCheck := controller.NewHealthCheck()
	dbConfig := config.NewDBConfig()
	gormDB := config.NewGormDBConnection(dbConfig)
	userPostgresRepository := db.NewUserPostgresRepository(gormDB)
	bcryptHashService := infra.NewBcryptService()
	rabbitEventBus := rabbitmq.NewRabbitEventBus()
	registerUser := service.NewRegisterUserService(userPostgresRepository, bcryptHashService, rabbitEventBus)
	controllerRegisterUser := controller.NewRegisterUserController(registerUser)
	loginService := service.NewLoginService(userPostgresRepository, bcryptHashService)
	jwtService := infra.NewJWTService()
	login := controller.NewLoginController(loginService, jwtService)
	usersRetriever := service.NewUsersRetrieverService(userPostgresRepository)
	getAllUsers := controller.NewGetAllUsersController(usersRetriever)
	routerRouter := router.NewRouter(healthCheck, controllerRegisterUser, login, getAllUsers)
	app := NewApp(routerRouter, rabbitEventBus)
	return app
}
