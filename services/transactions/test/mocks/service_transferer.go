// Code generated by mockery v2.47.0. DO NOT EDIT.

package mocks

import (
	context "context"

	event "github.com/manuhdez/transactions-api/internal/transactions/domain/event"
	mock "github.com/stretchr/testify/mock"

	transaction "github.com/manuhdez/transactions-api/internal/transactions/domain/transaction"
)

// ServiceTransferer is an autogenerated mock type for the Transferer type
type ServiceTransferer struct {
	mock.Mock
}

type ServiceTransferer_Expecter struct {
	mock *mock.Mock
}

func (_m *ServiceTransferer) EXPECT() *ServiceTransferer_Expecter {
	return &ServiceTransferer_Expecter{mock: &_m.Mock}
}

// PullEvents provides a mock function with given fields:
func (_m *ServiceTransferer) PullEvents() []event.Event {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PullEvents")
	}

	var r0 []event.Event
	if rf, ok := ret.Get(0).(func() []event.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]event.Event)
		}
	}

	return r0
}

// ServiceTransferer_PullEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PullEvents'
type ServiceTransferer_PullEvents_Call struct {
	*mock.Call
}

// PullEvents is a helper method to define mock.On call
func (_e *ServiceTransferer_Expecter) PullEvents() *ServiceTransferer_PullEvents_Call {
	return &ServiceTransferer_PullEvents_Call{Call: _e.mock.On("PullEvents")}
}

func (_c *ServiceTransferer_PullEvents_Call) Run(run func()) *ServiceTransferer_PullEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ServiceTransferer_PullEvents_Call) Return(_a0 []event.Event) *ServiceTransferer_PullEvents_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceTransferer_PullEvents_Call) RunAndReturn(run func() []event.Event) *ServiceTransferer_PullEvents_Call {
	_c.Call.Return(run)
	return _c
}

// Transfer provides a mock function with given fields: _a0, _a1
func (_m *ServiceTransferer) Transfer(_a0 context.Context, _a1 transaction.Transfer) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Transfer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, transaction.Transfer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ServiceTransferer_Transfer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Transfer'
type ServiceTransferer_Transfer_Call struct {
	*mock.Call
}

// Transfer is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 transaction.Transfer
func (_e *ServiceTransferer_Expecter) Transfer(_a0 interface{}, _a1 interface{}) *ServiceTransferer_Transfer_Call {
	return &ServiceTransferer_Transfer_Call{Call: _e.mock.On("Transfer", _a0, _a1)}
}

func (_c *ServiceTransferer_Transfer_Call) Run(run func(_a0 context.Context, _a1 transaction.Transfer)) *ServiceTransferer_Transfer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(transaction.Transfer))
	})
	return _c
}

func (_c *ServiceTransferer_Transfer_Call) Return(_a0 error) *ServiceTransferer_Transfer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceTransferer_Transfer_Call) RunAndReturn(run func(context.Context, transaction.Transfer) error) *ServiceTransferer_Transfer_Call {
	_c.Call.Return(run)
	return _c
}

// NewServiceTransferer creates a new instance of ServiceTransferer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServiceTransferer(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServiceTransferer {
	mock := &ServiceTransferer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
