// Code generated by mockery v2.47.0. DO NOT EDIT.

package mocks

import (
	context "context"

	event "github.com/manuhdez/transactions-api/internal/users/domain/event"
	mock "github.com/stretchr/testify/mock"
)

// EventHandler is an autogenerated mock type for the Handler type
type EventHandler struct {
	mock.Mock
}

type EventHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *EventHandler) EXPECT() *EventHandler_Expecter {
	return &EventHandler_Expecter{mock: &_m.Mock}
}

// Handle provides a mock function with given fields: ctx, _a1
func (_m *EventHandler) Handle(ctx context.Context, _a1 event.Event) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Handle")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, event.Event) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EventHandler_Handle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handle'
type EventHandler_Handle_Call struct {
	*mock.Call
}

// Handle is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 event.Event
func (_e *EventHandler_Expecter) Handle(ctx interface{}, _a1 interface{}) *EventHandler_Handle_Call {
	return &EventHandler_Handle_Call{Call: _e.mock.On("Handle", ctx, _a1)}
}

func (_c *EventHandler_Handle_Call) Run(run func(ctx context.Context, _a1 event.Event)) *EventHandler_Handle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(event.Event))
	})
	return _c
}

func (_c *EventHandler_Handle_Call) Return(_a0 error) *EventHandler_Handle_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EventHandler_Handle_Call) RunAndReturn(run func(context.Context, event.Event) error) *EventHandler_Handle_Call {
	_c.Call.Return(run)
	return _c
}

// Type provides a mock function with given fields:
func (_m *EventHandler) Type() event.Type {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Type")
	}

	var r0 event.Type
	if rf, ok := ret.Get(0).(func() event.Type); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(event.Type)
	}

	return r0
}

// EventHandler_Type_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Type'
type EventHandler_Type_Call struct {
	*mock.Call
}

// Type is a helper method to define mock.On call
func (_e *EventHandler_Expecter) Type() *EventHandler_Type_Call {
	return &EventHandler_Type_Call{Call: _e.mock.On("Type")}
}

func (_c *EventHandler_Type_Call) Run(run func()) *EventHandler_Type_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EventHandler_Type_Call) Return(_a0 event.Type) *EventHandler_Type_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EventHandler_Type_Call) RunAndReturn(run func() event.Type) *EventHandler_Type_Call {
	_c.Call.Return(run)
	return _c
}

// NewEventHandler creates a new instance of EventHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEventHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *EventHandler {
	mock := &EventHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
